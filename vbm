#!/usr/bin/perl
#
# script to boot and attach console
# to headless VirtualBox machine
#
use Data::Dumper;
use Getopt::Std;
use strict;
use File::Path qw(make_path);
use File::Temp qw(tempfile);
use File::Basename;

# read in the config file
our ($vbdiskdir,$vbheadless,$vbheadlessargs,$vbmanage,$socat,$socatargs,$VMs,$DISKs,$NETs);
our @controllers=("IDE", "SATA", "SCSI", "SAS");
my $config_file = $ENV{'HOME'}."/.vbm";
require $config_file;

# command line options
our %opt;
my $opt_string='m:n:o:a:c:s:N:r:O:M:A:E:w:C:BRVdblhpPvLDHZe';
if(! getopts( "$opt_string", \%opt )){ usage(); exit; }
#print Dumper(%opt); exit;

# create our shared disk directory
if(! -d "$vbdiskdir"){ make_path("$vbdiskdir") }

# init the VMs hash
read_vms();

our $conpipe="/tmp/vb-".$opt{n}."-console";
our $titlebar=$opt{n}." console";

if($opt{h}){ usage(); exit; }
if($opt{C}){ clonevm(); exit; }
if($opt{l}){ listvms(); exit; }
if($opt{d}){ listdisks(); exit; }
if($opt{e}){ listnetworks(); exit; }
if($opt{E}){ setnetwork(); exit; }
if($opt{m}){ mountcd(); exit; }
if($opt{a}){ add_disks(); exit; }
if($opt{b}){ boot_vm(); exit; }
if($opt{p}){ poweroff_vm(); exit; }
if($opt{P}){ poweroff_acpi_vm(); exit; }
if($opt{r}){ remove_disk(); exit; }
if($opt{B}){ create_modify_vm(); exit; }
if($opt{A}){ attach_disk(); exit; }
if($opt{D}){ delete_vm(); exit; }
if($opt{w}){ netcable(); exit; }
# print usage and bail if we get to here
usage(); exit;

sub usage {
  print qq|
    usage:

    $0 -l [ -L ] [ -N VMx,VMy,VMz,... ]
    $0 -d
    $0 -e
    $0 -E X,network -n VM
    $0 -w X,Y -n VM
    $0 -B -n VM [ -O OS_TYPE ] [ -M RAM_MB ] [ -c CPUs ] [ -H ] 
    $0 -C VM,CLONE
    $0 -b -n VM [ -V ] [ -o DEVx,DEVy,... ] [ -v ]
    $0 -m /path/to/cdimage.iso -n VM -c XXX
    $0 -p -n VM
    $0 -P -n VM
    $0 -A DISKUUID -c XXX -N VMx,VMy,VMz,... [ -v ]
    $0 -a X -c XXX -s XX -N VMx,VMy,VMz,... [ -v ]
    $0 -r DISKUUID -N VMx,VMy,VMz,... [ -R ] [ -v ]
    $0 -D -n VM -R
    $0 -h

    -l : list VMs
    -d : list VirtualBox disks
    -e : list VirtualBox networks
    -E : set network NIC X attachment for VM
    -w : set network X attached (1) or disconnected (0)
    -L : long listing includes networks and disks
    -n : name of the VM
    -B : build or modify VM
    -C : create CLONE from VM
    -O : OS type (Solaris_64,OpenSolaris_64,Solaris11_64) see "VBoxManage list ostypes"
    -H : make VM headless (remove graphics controller, disable keyboard and mouse)
    -M : amount of RAM for this VM
    -b : power on and boot machine
    -m : mount iso on node
    -o : when used with -b, specify the BIOS boot device order (dvd, disk, net, floppy)
    -V : enable VRDE server
    -a : add X drives to VM(s)
    -c : controller name. Use SAS or SCSI for shared. Single attach may use IDE or SATA.
    -s : size of drive(s) in GB
    -N : comma seperated list of VMs to which the disk operation shoud be performed
    -r : detach disk UUID from the given nodes
    -R : delete the disk medium
    -A : attach disk UUID to the given nodes
    -D : delete the VM
    -p : power off machine
    -P : send ACPI power off request
    -v : verbose output
    -h : duh!

|;
}

sub clonevm {
  my($vm,$clone)=split(',', $opt{C});
  my $cmd="$vbmanage clonevm $vm --name $clone --register";
  print "Running $cmd\n" if $opt{v};
  system($cmd);
}

sub netcable {
  my $vm=$opt{n};
  my($wire, $state)=split(',', $opt{w});
  my $cmd;
  if($state){ $cmd="$vbmanage modifyvm $vm --cableconnected$wire on"; }
  else{ $cmd="$vbmanage modifyvm $vm --cableconnected$wire off"; }
  print "Running $cmd\n" if $opt{v};
  system($cmd);
}

sub setnetwork {
  if(! defined $opt{n}){ die "Must specify VM name (-n VM)\n"; }
  readnetworks();
  my $vm=$opt{n};
  my($nic, $net)=split(',', $opt{E});
  my $ntype = $NETs->{$net}->{'type'};
  my $cmd;
  if($ntype eq "bridged"){ $cmd="$vbmanage modifyvm $opt{n} --nic$nic $ntype --bridgeadapter$nic $net"; }
  elsif($ntype eq "hostonly"){ $cmd="$vbmanage modifyvm $opt{n} --nic$nic $ntype --hostonlyadapter$nic $net"; }
  elsif($ntype eq "intnet"){ $cmd="$vbmanage modifyvm $opt{n} --nic$nic $ntype --intnet$nic $net"; }
  elsif($ntype eq "nat"){ $cmd="$vbmanage modifyvm $opt{n} --nic$nic $ntype --nat-network$nic $net"; }
  else{ die "Unknown network: $net type $ntype\n"; }
  print "Running $cmd\n" if $opt{v};
  system($cmd);
}

sub readnetworks {
  $NETs={};
  my %nettypes = (
   "intnets" => "intnet",
   "bridgedifs" => "bridged",
   "hostonlyifs" => "hostonly",
   "natnets" => "nat",
  );
  foreach my $nettype(sort(keys(%nettypes))){
    my $cmd="$vbmanage list $nettype";
    print "Running $cmd\n" if $opt{v};
    open(foo, "$cmd |");
    my $name;
    while(<foo>){ chomp;
      if(/^Name:\s+(\S+)$/){ $name=$1; $NETs->{$name}->{'type'}=$nettypes{$nettype}; }
      elsif(/^Name:\s+(\S+):.*$/){ $name=$1; $NETs->{$name}->{'type'}=$nettypes{$nettype}; }
      elsif(/^IPAddress:\s+(\S+.*)$/){ $NETs->{$name}->{'ip'}=$1; }
    }
  }
}

sub listnetworks {
  readnetworks();
  print "\n    Networks\n\n";
  foreach my $net(sort(keys %{$NETs})){
    if(defined $NETs->{$net}->{'ip'}){
      print "      $net :: $NETs->{$net}->{'type'} :: $NETs->{$net}->{'ip'}\n";
    }else{
      print "      $net :: $NETs->{$net}->{'type'} :: \n";
    }
  }
}

sub delete_vm {
  my $cmdstring = "$vbmanage unregistervm $opt{n}";
  if($opt{R}){ $cmdstring.=" --delete"; }
  print "Running $cmdstring\n" if $opt{v};
  system($cmdstring);
}

sub poweroff_vm {
  my $cmdstring = "$vbmanage controlvm $opt{n} poweroff";
  print "Running $cmdstring\n" if $opt{v};
  system($cmdstring);
}

sub poweroff_acpi_vm {
  my $cmdstring = "$vbmanage controlvm $opt{n} acpipowerbutton";
  print "Running $cmdstring\n" if $opt{v};
  system($cmdstring);
}

sub set_title_bar {
  my($titlebar)=@_;
  print "\033]0;${titlebar}\007";
}

sub listdisks {
  read_disks();
  foreach my $uuid(sort keys(%{$DISKs})){
    if(defined $DISKs->{$uuid}->{'used'}){
      print "$uuid :: $DISKs->{$uuid}->{'format'} :: @{$DISKs->{$uuid}->{'used'}} :: $DISKs->{$uuid}->{'size'} :: $DISKs->{$uuid}->{'loc'}\n";
    }else{
      print "$uuid :: $DISKs->{$uuid}->{'format'} :: (Not Used) :: $DISKs->{$uuid}->{'size'} :: $DISKs->{$uuid}->{'loc'}\n";
    }
  }
}

sub read_disks {
  $DISKs={};
  my($uuid);
  my $cmd="$vbmanage list -l hdds";
  print "Running $cmd\n" if $opt{v};
  open(foo, "$cmd |");
  while(<foo>){ chomp;
    if(/^UUID:\s+(\S+)$/){ $uuid=$1; }
    if(/^Location:\s+(\S.*)$/){ $DISKs->{$uuid}->{'loc'}=$1; }
    if(/^Capacity:\s+(\d+) /){ $DISKs->{$uuid}->{'size'}=$1; }
    if(/^Format variant:\s+(\S+) /){ $DISKs->{$uuid}->{'format'}=$1; }
    if(/^In use by VMs:\s+(\S.*) \(UUID/){ push(@{$DISKs->{$uuid}->{'used'}}, $1); }
    if(/^\s+(\S.*) \(UUID/){ push(@{$DISKs->{$uuid}->{'used'}}, $1); }
  }
  print Dumper $DISKs if $opt{Z};
}

sub read_vms {
  $VMs={};
  my ($vm);
  my $cmd="$vbmanage list -l vms";
  print "Running $cmd\n" if $opt{v};
  open(foo, "$cmd |");
  while(<foo>){ chomp;
    if(/^Name:\s+(\S+.*)$/){ $vm=$1; }
    if(/^Memory size:\s+(\S.*)$/){ $VMs->{$vm}->{'memory'}=$1; }
    if(/^Number of CPUs:\s+(\S*)$/){ $VMs->{$vm}->{'cpus'}=$1; }
    if(/^Boot Device \((\d)\):\s*(\S.*)$/){ my $i=($1 - 1); ${$VMs->{$vm}->{'bootorder'}}[$i]=$2; }
    if(/^UUID:\s+(\S+)$/){ $VMs->{$vm}->{'uuid'}=$1.")"; }
    if(/^State:\s+(\S+.*)\.\d+\)$/){ $VMs->{$vm}->{'state'}=$1.")"; }
    if(/^Config file:\s+(\S+.*)$/){ $VMs->{$vm}->{'dir'}=dirname($1); }
    if(/^(\S+)\s\((\d+)\,\s(\d+)\):\s(\S+.*)\s\(UUID\:\s(\S+)\)$/){ $VMs->{$vm}->{$1}->{$2}->{$3}->{'file'}=$4; $VMs->{$vm}->{$1}->{$2}->{$3}->{'uuid'}=$5;}
    if(/^(\S+)\s\((\d+)\,\s(\d+)\):\s(Empty)$/){ $VMs->{$vm}->{$1}->{$2}->{$3}->{'file'}=$4; $VMs->{$vm}->{$1}->{$2}->{$3}->{'uuid'}='';}
    if(/^NIC\s(\d):\s+MAC:\s(\S+)\,\sAttachment\:\s(\S+.*)\,\sCable connect/){ $VMs->{$vm}->{'nic'}->{$1}->{'mac'}=$2; $VMs->{$vm}->{'nic'}->{$1}->{'attach'}=$3; }
  }
  print Dumper $VMs if $opt{Z};
}

sub remove_disk {
  my $uuid=$opt{r};
  my @nodes=split(',', $opt{N});
  my ($portmax, $targetmax);
  NODE: foreach my $node(@nodes){
    foreach my $ctlr(sort(@controllers)){
      if($ctlr eq "SCSI"){ $portmax=15; $targetmax=0; }
      elsif($ctlr eq "SATA"){ $portmax=29; $targetmax=0; }
      elsif($ctlr eq "SAS"){ $portmax=7; $targetmax=0; }
      elsif($ctlr eq "IDE"){ $portmax=1; $targetmax=1; }
      for(my $i=0; $i<=$portmax; $i++){
        for(my $j=0; $j<=$targetmax; $j++){
          print "Checking VM $node controller $ctlr port $i and device $j for disk $uuid\n" if $opt{v};
          if($VMs->{$node}->{$ctlr}->{$i}->{$j}->{'uuid'} eq $uuid){
            my $cmd = "$vbmanage storageattach '$node' --storagectl $ctlr --port $i --device $j --medium none";
            print "Running $cmd\n" if $opt{v};
            system($cmd);
            next NODE;
          }
        }
      }
    }
  }
  if($opt{R}){
    my $cmd = "$vbmanage closemedium disk $uuid --delete";
    print "Running $cmd\n" if $opt{v};
    system($cmd);
  }
}

sub attach_disk {
  #my ($node, $diskuuid, $shared, $dtype) = @_;
  my $uuid=$opt{A};
  my $ctlr=$opt{c};
  my (%c,$shared);
  my @nodes=split(',', $opt{N});
  read_disks();
  foreach my $node(@nodes){ $c{$node}=1; }
  foreach my $n(@{$DISKs->{$uuid}->{'used'}}){ $c{$n}=1; }
  if((scalar(keys %c)) > 1){ $shared=1; }else{ $shared=0; }
  if($shared){
    my $cmd="$vbmanage modifymedium disk $uuid --type shareable";
    print "Running $cmd\n" if $opt{v};
    system($cmd);
  }
  foreach my $n(@{$DISKs->{$uuid}->{'used'}}){ delete $c{$n}; }
  foreach my $node(sort(keys %c)){ 
    print "Calling disk_attach($node, $uuid, $shared, 'hdd')\n" if $opt{v};
    disk_attach($node, $uuid, $shared, 'hdd');
  }
}

sub add_disks {
  if( ! $opt{N} ){ usage(1); }
  if( ! $opt{c} ){ usage(1); }
  if( ! $opt{s} ){ usage(1); }
  my @nodes=split(',', $opt{N});
  my $shared=1;
  if(scalar(@nodes) == 1 ){
    my $node=$nodes[0];
    $vbdiskdir = $VMs->{$node}->{'dir'};
    $shared=0;
  }
  # add controller if needed
  foreach my $node(@nodes){
    my $ctlr=uc($opt{c});
    if(! defined $VMs->{$node}->{$ctlr}){
      my $cmd = "$vbmanage storagectl '$node' --name $ctlr --add $ctlr";
      if($ctlr eq "SAS"){ $cmd .= " --portcount 8"; }
      print "Running: $cmd\n" if $opt{v};
      system($cmd);
    }
  }
  print "Using $vbdiskdir for disk creation.\n" if $opt{v};
  my $cmdstring;
  my $disks=$opt{a};
  print "Creating $disks disks.\n" if $opt{v};
  for(my $I=1; $I<=$disks; $I++){
    print "Creating $I of $disks disks.\n" if $opt{v};
    my $diskname = disk_tmpfile();
    print "creating $diskname\n" if $opt{v};
    my $size = (1024 * $opt{s});
    my $cmd;
    if($shared){ $cmd = "$vbmanage createmedium disk --size $size --variant Fixed --filename '$diskname'\n"; }
    else{ $cmd = "$vbmanage createmedium disk --size $size --filename '$diskname'\n"; }
    print $cmd if $opt{v};
    my $uuid='';
    open(foo, "$cmd |");
    while(<foo>){
      chomp;
      if(/UUID: (\S+)$/){ $uuid=$1 }
    }
    foreach my $node(@nodes){
      print "Attaching new disk $uuid to $node\n" if $opt{v};
      disk_attach($node,$uuid,$shared,'hdd');
    }
  }
}

sub disk_attach {
  my ($node, $diskuuid, $shared, $dtype) = @_;
  my $ctlr=uc($opt{c});
  my ($port, $portmax, $targetmax);
  if($ctlr eq "SCSI"){ $portmax=15; $targetmax=0; }
  elsif($ctlr eq "SATA"){ $portmax=29; $targetmax=0; }
  elsif($ctlr eq "SAS"){ $portmax=7; $targetmax=0; }
  elsif($ctlr eq "IDE"){ $portmax=1; $targetmax=1; }
  else{
    print "\nUnknown controller: $ctlr\nRemoving disk, $diskuuid\n";
    exec("$vbmanage closemedium $diskuuid --delete")||die;
    exit(1);
  }
  # find an unused port
  for(my $i=0; $i<=$portmax; $i++){
    for(my $j=0; $j<=$targetmax; $j++){
      print "Checking port $i and device $j\n" if $opt{Z};
      if(! defined $VMs->{$node}->{$ctlr}->{$i}->{$j}->{'file'}){
        my $cmd = "$vbmanage storageattach '$node' --storagectl $ctlr --type $dtype --port $i --device $j --medium '$diskuuid'";
        if($shared){ $cmd .= " --mtype shareable"; }
        print "Running: $cmd\n" if $opt{v};
        system($cmd);
        read_vms();
        return;
      }
    }
  }
  print "Unable to attach disk, deleting.\n";
  system("$vbmanage closemedium $diskuuid --delete");
}

sub disk_tmpfile {
  (undef, my $diskname) = tempfile("vmdiskXXXX", DIR=>"$vbdiskdir", OPEN=>0, SUFFIX=>"");
  return($diskname);
}

sub mountcd {
  my $node=$opt{n};
  my $ctlr=uc($opt{c});
  if(! defined $VMs->{$node}->{$ctlr}){
    my $cmd = "$vbmanage storagectl '$node' --name $ctlr --add $ctlr";
    print "Running $cmd\n" if $opt{v};
    system($cmd);
  }
  my ($port, $portmax, $targetmax);
  if($ctlr eq "SCSI"){ $portmax=15; $targetmax=0; }
  elsif($ctlr eq "SATA"){ $portmax=29; $targetmax=0; }
  elsif($ctlr eq "SAS"){ $portmax=7; $targetmax=0; }
  elsif($ctlr eq "IDE"){ $portmax=1; $targetmax=1; }
  else{
    print "\nUnknown controller: $ctlr\n";
    exit(1);
  }
  # find the DVD port
  for(my $i=0; $i<=$portmax; $i++){
    for(my $j=0; $j<=$targetmax; $j++){
      if($VMs->{$node}->{$ctlr}->{$i}->{$j}->{'file'} =~ /\.iso$/){
        print "Unmounting $VMs->{$node}->{$ctlr}->{$i}->{$j}->{'file'} from $ctlr ($i, $j)\n" if $opt{v};
        my $cmdstring = "$vbmanage storageattach $opt{n} --storagectl $ctlr --port $i --device $j --type dvddrive --medium emptydrive";
        if(system($cmdstring)!=0){die "exec failed: $cmdstring";}
        sleep 2;
        print "Mounting $opt{m} to $ctlr ($i, $j)\n" if $opt{v};
        my $cmdstring = "$vbmanage storageattach $opt{n} --storagectl $ctlr --port $i --device $j --type dvddrive --medium '$opt{m}'";
        exec($cmdstring)||die "exec failed: $cmdstring";
      }elsif($VMs->{$node}->{$ctlr}->{$i}->{$j}->{'file'} =~ /Empty/){
        print "Mounting $opt{m} to $ctlr ($i, $j)\n" if $opt{v};
        my $cmdstring = "$vbmanage storageattach $opt{n} --storagectl $ctlr --port $i --device $j --type dvddrive --medium '$opt{m}'";
        exec($cmdstring)||die "exec failed: $cmdstring";
      }
    }
  }
  # new attachment, call attach
  disk_attach($node, $opt{m}, 0, 'dvddrive');
}

sub listvms {
  my ($vm, $maxl, $controller, @nodes);
  if(defined $opt{N}){
    @nodes=split(',', $opt{N});
  }else{
    @nodes=keys(%{$VMs});
  }
  foreach $vm(sort @nodes){ my $l=length($vm); if($l>$maxl){$maxl=$l;} }
  print "\n\n  Virtual Machines\n\n";
  foreach $vm(sort @nodes){
    my $n;
    while(length($n.$vm)<$maxl){ $n.=" "; }
    print "\n" if $opt{L};
    print "    $vm$n  ::  $VMs->{$vm}->{'state'}\n";
    if($opt{L}){
      print "      CPUs $VMs->{$vm}->{'cpus'} :: RAM $VMs->{$vm}->{'memory'} :: BIOS Boot Order ->  @{$VMs->{$vm}->{'bootorder'}}\n";
      foreach $controller(sort keys(%{$VMs->{$vm}->{'nic'}})){
        print "      NIC $controller :: MAC $VMs->{$vm}->{'nic'}->{$controller}->{'mac'} :: $VMs->{$vm}->{'nic'}->{$controller}->{'attach'}\n";
      }
      foreach $controller(sort(@controllers)){
        foreach my $i(sort {$a<=>$b}keys(%{$VMs->{$vm}->{$controller}})){
          foreach my $j(sort keys(%{$VMs->{$vm}->{$controller}->{$i}})){
            print "      $controller ($i, $j) $VMs->{$vm}->{$controller}->{$i}->{$j}->{'file'}  UUID $VMs->{$vm}->{$controller}->{$i}->{$j}->{'uuid'}\n";
          }
        }
      }
    }
  }
}

sub boot_vm {
  # set the title bar
  set_title_bar($titlebar);

  # connect console if running
  if(checkrunning($opt{n})){ consoleconnect($conpipe); }

  # set boot order
  #my $cmdstring = "$vbmanage modifyvm $opt{n} --boot1 $bo[0] --boot2 $bo[1] --boot3 $bo[2] --boot4 $bo[3]";
  my $cmdstring = "$vbmanage modifyvm $opt{n}";
  if( my @bo = split(/\,/,$opt{o}) ){
    my $i=1;
    while(my $d=shift(@bo)){
      $cmdstring.=" --boot$i $d"; $i++;
    }
    print "Running $cmdstring\n" if $opt{v};
    system($cmdstring);
  }
  # boot vm
  bootmachine($opt{n});
  if(checkrunning($opt{n})){ consoleconnect($conpipe); }
  die "Can not boot or console to $opt{n}";
}

sub consoleconnect {
  my($pipefoo)=@_;
  if(! -e $pipefoo){ die "Console pipe does not exist: $pipefoo"; }
  system("clear");
  my $cmdstring = $socat." ".$socatargs." ".$pipefoo;
  exec($cmdstring)||die "exec failed: $cmdstring";
}

sub checkrunning {
  my($machine)=@_;
  my $running=0;
  open(foo,"$vbmanage list runningvms |")||die;
  while(<foo>){
    chomp;
    if(/^\"$machine\"\s.*/){ $running=1; }
  }
  close foo;
  return($running);
}

sub bootmachine {
  my($machine)=@_;
  if($opt{V}){ $vbheadlessargs = "--vrde on --vrdeproperty TCP/Ports=3389-3400"; }
  my $cmdstring = "$vbmanage modifyvm $machine --uartmode1 server /tmp/vb-${machine}-console";
  system($cmdstring);
  my $cmdstring = "$vbmanage modifyvm $machine --uart1 0x3f8 4";
  system($cmdstring);
  $cmdstring = "$vbheadless $vbheadlessargs -s $machine";
  defined(my $pid = fork)||die "Can't fork: $!";
  if($pid){
    # wait a bit for the machine to start
    sleep 5;
  }else{
    # child needs to exec the vm start command
    open STDIN, '/dev/null'   or die "Can't read /dev/null: $!";
    open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
    open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";
    exec($cmdstring)||die;
  }
}

sub create_modify_vm {
  my $vm = $opt{n};
  my $cmd="";
  # create vm if needed
  if(! defined $VMs->{$vm}){
    $cmd="$vbmanage createvm --name $vm --ostype $opt{O} --register";
    print "Running $cmd\n" if $opt{v};
    system($cmd);
  }
  $cmd="VBoxManage modifyvm $vm";
  if(defined $opt{H}){ $cmd.=" --graphicscontroller none --vram 0 --keyboard usb --mouse usb --usb off --usbehci off --usbxhci off"; }
  if(defined $opt{M}){ $cmd.=" --memory $opt{M}"; }
  if(defined $opt{O}){ $cmd.=" --ostype $opt{O}"; }
  if(defined $opt{c}){ $cmd.=" --cpus $opt{c}"; }
  print "Running $cmd\n" if $opt{v};
  system($cmd);
}

